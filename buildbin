#!/bin/bash -i

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# buildbin
# A utility for building Arch Linux packages within a container
#
# Copyright 2023 D. Murphy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### Read in arguments and display help if applicable ###########################
[[ $# -gt 0 ]] || help=1
mounts=( "/" )

# Pass back a normalized file path as a variable
function setpath {
  if [[ -z $2 ]]; then
    unset $1
    return 1
  fi
  local path newpath i
  IFS='/' read -ra path <<< "$2"
  [[ -z ${path[0]} ]] || newpath="$PWD"
  for (( i=0; i<${#path[@]}; i++ )); do
    case "${path[$i]}" in
      ''|'.') true                           ;;
      ..)     newpath="${newpath%/*}"        ;;
      *)      newpath="$newpath/${path[$i]}" ;;
    esac
  done
  printf -v $1 "/${newpath#\/}"
}

while [[ -n "$1" ]]; do
  case "$1" in
    -u|--user)         shift; chuser="$1"                                     ;;
    -c|--copy)         copy=1                                                 ;;
    -m|--makedir)      makedir=1                                              ;;
    -d|--build)        shift; setpath builddir "$1"                           ;;
       --no-erase)     noerase=1                                              ;;
    -i|--install)      install=1; copy=1                                      ;;
    -r|--repo)         shift; repo=1; repodb="$1"                             ;;
    -b|--bind)         shift;
                       if [[ -n "$2" && "$2" != -* ]]; then
                         setpath extmnt[${#mounts[@]}] "$1" && shift
                       fi
                       setpath mounts[${#mounts[@]}] "$1"                     ;;
    -h|--help)         help=1                                                 ;;
       --about)        about=1                                                ;;
    -s|--src|--source) shift; source=1
                       if [[ -n "$2" && "$2" != -* ]]; then
                         setpath srcdir[0] "$1" && shift
                       fi
                       setpath srcdir[1] "$1"                                 ;;
    -t|--chroot)       shift; chroot=1; setpath rootdir "$1"                  ;;
    -p|--copy-src)     shift; copysrc=1; setpath spkgdir "$1"                 ;;
    -l|--launch)       true                                                   ;;
       --force-reset)  freset=1                                               ;;
       --)             shift; commands=( "$@" ); break                        ;;
    *)                 echo "invalid option $1"; exit 1                       ;;
  esac
  shift
done

if ((about)); then
  echo "
Buildbin is a script for building Arch Linux packages in a container without
cluttering the base system installation with build dependencies. This script
bind mounts the system or specified root directory as read only, upon which an
overlay filesystem is created. A chroot container is launched on the overlay
filesystem, within which dependencies can be installed and packages can be built
without modification to the underlying base system. Upon exiting the container,
packages can be automatically moved into the system cache, added to a local
repository, or installed."
  exit 0
fi

if ((help)); then
  echo "
A utility for building Arch Linux packages within a container

Usage: buildbin [options]

Options:
  -h, --help              show this message and exit
  -u, --user <name>       username to enter container as. defaults to \$SUDO_USER
  -d, --build <path>      path to set up the container. defaults to ./
  -s, --source <path(s)>  source directory to enter container and build packages
                          in. if an existing folder is specified, changes within
                          this directory will persist after exiting; otherwise a
                          temporary directory will be created. if --chroot is
                          called, an external source directory may be specified
                          by providing two paths: first the external directory
                          and second the mountpoint within the chroot
  -m, --makedir           make build directory if it does not exist
  -c, --copy              copy packages to the system pacman cache
  -p, --copy-src          copy source packages to the specified directory
  -i, --install           install all packages that were built. implies --copy
  -r, --repo <database>   add packages to a local repository. specify by path or
                          by name
  -b, --bind <path(s)>    absolute paths to bind mount in addition to /. may be
                          called multiple times and mounts must be in order. if
                          --chroot is called, an external mount may be specified
                          by providing two paths: first the external directory
                          and second the mountpoint within the chroot
  -t, --chroot <path>     overlay the specified directory as root instead of /
  -l, --launch            launch buildbin with default options. necessary only
                          if no other options are specified
  --no-erase              do not erase temporary container files on exit
  --force-reset           reset the build directory by removing stale mounts and
                          deleting temporary container files
  --about                 show program description
  --                      enter the container, execute a command, and exit if
                          the return status is zero. any arguments after --
                          will be passed directly to bash and executed as --user

The author's favorite workflow utilizes a tmpfs build folder and a network
mounted cache and local repository, with the following command:

> sudo buildbin -d /tmp -c -r /mnt/pacman/cache/home.db.tar -b /mnt/pacman"
  exit 0
fi

# User to enter the chroot as
[[ -n $chuser ]] || chuser=$SUDO_USER
[[ -n $chuser ]] || chuser=$DOAS_USER
[[ -n $chuser ]] || chuser=root

function die {
  echo "$2"
  exit $1
}

# Can't mount or create chroot if we're not root
((! UID)) || die 2 "you must have root priveleges to continue."

# Add bash builtins
enable -f /usr/lib/bash/sleep sleep

### Set up program and test directories ########################################

# Find user
homedir="$(grep ^$chuser: "$rootdir/etc/passwd" 2>/dev/null | cut -d: -f6)"

# Define overlay paths
[[ -n $builddir ]] || builddir="$PWD"
lowerdir="$builddir/lower"
upperdir="$builddir/upper"
workdir="$builddir/work"
mergedir="$builddir/buildbin"

# Determine cache directory
if ((copy)) || ((repo)); then
  for dir in $(/usr/bin/pacman -v 2>/dev/null | sed -n 's@^Cache Dirs: @@p'); do
    if [[ -d "$dir" && -w "$dir" ]]; then
      setpath cachedir "$dir" && break
    fi
  done
  [[ -n $cachedir ]] || cachedir='/var/cache/pacman/pkg'
fi

# Determine repo path
if ((repo)); then
  if [[ -n ${repoerr:="$repodb"} ]]; then
    if [[ "$repodb" =~ (.+\.db$|.+\.db\.tar.*|.*/.*) ]]; then
      repodb="$(realpath -qm "$repodb")"
      repoerr="$repodb"
    elif [[ -f "$cachedir/$repodb.db" ]]; then
      repodb="$(realpath -qm "$cachedir/$repodb.db")"
    elif setpath repodir "$(grep -P "^\Q[${repodb}]\E" -A30 /etc/pacman.conf | sed -n '1d;/^\[/q;/^Server *= *file/{s/.*file\:\/\///p}')"; then
      repodb="$(realpath -qm "$repodir/$repodb.db")"
    fi
  fi

  if [[ "$repodb" =~ ^/.+\.db\.tar.* && -f "$repodb" ]]; then
    setpath repodir "/${repodb%/*}"
  else
    die 3 "local repository ${repoerr/${repoerr}/${repoerr} }not found or invalid. exiting."
  fi
fi

# Test paths
[[ -z $chroot || -d "$rootdir" ]] || die 4 "chroot path ${rootdir/${rootdir}/${rootdir} }not found. exiting."
[[ -x "$rootdir"/bin/bash ]]      || die 5 "linux installation not present at $rootdir/. exiting."
[[ -n $homedir ]]                 || die 6 "user $chuser not found. exiting."
[[ -z $copysrc || -d "$spkgdir" ]] || die 17 "source package directory ${spkgdir/${spkgdir}/${spkgdir} }not found. exiting."

# Reset the build folder
function resetbuild {
  for i in $(tac /proc/mounts | cut -d' ' -f2 | grep -e ^"${mergedir// /\\040}" -e ^"${lowerdir// /\\040}_"); do
    umount "${i//\\040/ }" 2>/dev/null || err=1
  done
  ((! err)) || die 41 "stale mounts remain within $builddir. check /etc/mtab."

  rm -rf "${upperdir}_"* "${workdir}_"* 2>/dev/null || err=2
  rm -df "${lowerdir}_"* "$mergedir"    2>/dev/null || err=3
  ((! err)) || die 42 "files were not deleted. perhaps there are unexpected contents."
}

# Set up and check source directory
if ((source)); then
  [[ $chuser != root ]] || die 7 "option --source is not allowed when --user is root. exiting."

  # Organize $srcdir as [0] outside chroot and [1] inside
  if [[ -z ${srcdir[0]} ]]; then
    srcdir[0]="$rootdir${srcdir[1]}"
  fi

  [[ -d "${srcdir[0]}" ]] || die 8 "source directory ${srcdir[0]/${srcdir[0]}/${srcdir[0]} }not found. exiting."

  # Disallow home directory as the source directory
  [[ ! "${srcdir[0]%/*}" -ef /home ]] || die 9 "source directory cannot be a home directory. exiting."

  # Disallow source directory in system path
  for i in /bin /boot /dev /etc /lib /lib64 /opt /proc /root /run /sbin /srv /sys /usr /var; do
    [[ "${srcdir[0]}" != $i* ]] || die 10 "source directory cannot be in a system directory. exiting."
  done

  # Prevent recursive mount
  [[ "$builddir" != "${srcdir[0]}"* ]] || die 11 "source directory cannot be below the build directory. exiting."
fi

# Set up and check build directory
if [[ -d "$builddir" ]]; then
  savedir=1
  if ((freset)); then
    resetbuild; exit 0
  elif [[ -n $(find "${lowerdir}_"* "${upperdir}_"* "${workdir}_"* "$mergedir" -maxdepth 0 -print -quit 2>/dev/null) ]]; then
    die 12 "build directory not empty. check contents and consider option --force-reset to delete the offending files."
  fi
elif [[ -e "$builddir" ]] || ((freset)); then
  die 13 "invalid build directory $builddir. exiting."
elif ((makedir)); then
  mkdir -m 755 -p "$builddir" || die 14 "failed to create build directory. exiting."
else
  die 15 "build directory ${builddir/${builddir}/${builddir} }does not exist. pass -m to create the directory."
fi

# Organize mounts as $extmount[@] outside chroot and $mounts[@] inside
for (( i=0; i<${#mounts[@]}; i++ )); do
  if [[ -z ${extmnt[$i]} ]]; then
    extmnt[$i]="$rootdir${mounts[$i]}"
  fi
  [[ -d "${extmnt[$i]}" ]] || die 16 "mount path ${extmnt[$i]/${extmnt[$i]}/${extmnt[$i]} }not found. exiting."
done

### Create trap to clean up on exit ############################################
function unmountfs {
  mountpoint -q "$1" || return 0
  for j in {1..11}; do
    umount -R "$1" 2>/dev/null && return 0
    if [[ $j -lt 6 ]]; then
      sleep 1
    elif [[ $j -lt 11 ]]; then
      echo "mount $1 is busy. close open files and wait..." && sleep 5
    fi
  done
  die 31 "failed to unmount $1. try --force-reset or clean up manually."
}

function closebin {
  exitcode=$?

  # Close overlay filesystem and bind mounts
  unmountfs "$mergedir"
  for (( i="${#mounts[@]}"-1; i>-1; i-- )); do
    unmountfs "${lowerdir}_$i"
  done

  # Delete build directory if specified
  if ((! noerase)); then
    rm -r "${upperdir}_"* "${workdir}_"* 2>/dev/null || err=2
    rmdir "$mergedir" "${lowerdir}_"*    2>/dev/null || err=3
    ((savedir)) || rmdir "$builddir"
  fi
  ((! err)) || die 32 "failed to tear down container. try --force-reset or clean up manually."
  exit $exitcode
}

trap closebin INT TERM EXIT

### Time for the fun stuff #####################################################
for (( i=0; i<"${#mounts[@]}"; i++ )); do

  # Create sub-folders if they don't exist
  perms=$(stat -c "-m %a -o %U -g %G" "${extmnt[$i]}")
  [[ $i -ne 0 ]] || install $perms -d "$mergedir"
  install $perms -d "${lowerdir}_$i" "${upperdir}_$i" "${workdir}_$i"

  # Mount filesystems
  mount --bind -v -o ro "${extmnt[$i]}" "${lowerdir}_$i"

  # Create the overlay filesystem
  if [[ ! -d "$mergedir${mounts[$i]}" ]]; then
    echo "mount destination ${mounts[$i]/${mounts[$i]}/$mergedir${mounts[$i]} }for ${extmnt[$i]} does not exist. skipping."
  else
    mount -v -t overlay overlay -o lowerdir="${lowerdir}_$i",upperdir="${upperdir}_$i",workdir="${workdir}_$i" "$mergedir${mounts[$i]}"
  fi
done

# Let's verify $mergedir is set up
[[ -x "$mergedir"/bin/bash ]] || die 21 "failed to create container. exiting."

# Mount source directory in the overlay filesystem. Generate temporary directory if not set
if [[ -z ${srcdir[1]} ]]; then
  for i in {1..50}; do
    printf -v srcdir[1] "/src-%04x" $((2*$RANDOM+$RANDOM%2))
    [[ ! -d "$mergedir${srcdir[1]}" ]] && break
  done
  mkdir -m 777 "$mergedir${srcdir[1]}" 2>/dev/null || die 22 "failed to create source directory. exiting."
  if ((! copy)) && ((! repo)); then echo "
your work will not be saved outside the container with the current options. if
this is not your intent, please exit and restart with the appropriate options."
  fi

elif [[ ! -d "$mergedir${srcdir[1]}" ]]; then
  die 23 "source destination ${srcdir[1]/${srcdir[1]}/$mergedir${srcdir[1]} }for ${srcdir[0]} does not exist. exiting."
else
  mount --bind -v -o rw "${srcdir[0]}" "$mergedir${srcdir[1]}" || die 24 "failed to mount source directory ${srcdir[0]}. exiting."
fi

# Test home directory, and then hijack bash prompt to identify when in the container
[[ -d "$mergedir$homedir" ]] || die 25 "home directory for $chuser not found. exiting."

function initfile {
  [[ $1 != root ]] || red=';91'
  echo "### Generated by buildbin. Do not write below this line. ###"
  echo "unset PROMPT_COMMAND"
  echo 'PS1="\[\e[1'$red'm\]buildbin\[\e[0m\] \W: "'
  echo 'PS2="> "'
  if [[ $1 == $chuser ]]; then
    echo 'if [[ $$ -le 3 ]]; then'
    echo "  cd '${srcdir[1]}'"
    if [[ -n ${commands[0]} ]]; then
      commands=( "${commands[@]/#/\"}" )
      commands=( "${commands[@]/%/\"}" )
      echo "  ${commands[@]} && exit 0"
    fi
    echo 'fi'
  fi
}

if [[ $chuser != root ]]; then
  if [[ ! -e "$mergedir$homedir/.bashrc" ]]; then
    true >> "$mergedir$homedir/.bashrc"
    chown --reference "$mergedir$homedir" "$mergedir$homedir/.bashrc"
  fi
  initfile $chuser >> "$mergedir$homedir/.bashrc"
fi
initfile root >> "$mergedir/root/.bashrc"

# Get start time and launch the container
echo
printf -v time '%(%s)T'
mount --rbind /dev  "$mergedir/dev"
mount --make-rslave "$mergedir/dev"
mount --rbind /sys  "$mergedir/sys"
mount --make-rslave "$mergedir/sys"
unshare --kill-child --pid --mount-proc="$mergedir/proc" chroot "$mergedir" su -s /bin/bash $chuser
sed -ni '/### Generated by buildbin. Do not write below this line. ###/q;p' "$mergedir$homedir/.bashrc"

### After exiting chroot, organize packages if requested #######################

# Generate search criteria or exit if not saving work
if ((copy)) || ((repo)) || ((install)); then
  if ((copysrc)); then
    regex='src|pkg'
  else
    regex='pkg'
  fi
elif ((copysrc)); then
  regex='src'
else
  exit 0
fi
echo
echo "searching for packages..."

# Search the container for packages with timestamp newer than the start time
if ((copy)); then
  if [[ -z ${srcdir[0]} ]]; then
    prune=( '-path' "${upperdir}_0${srcdir[1]}" '-prune' '-o' )
  fi
  while IFS= read -r -d '' line; do
    case "$line" in
      *.sig) copysigs+=( "$line" ) ;;
      *)     tocopy+=( "$line" )   ;;
    esac
  done < <(find "${upperdir}_"* 2>/dev/null "${prune[@]}" -newerct @$time -type f -regextype posix-extended -regex '(.+-){3}.+\.pkg\.tar.*' -print0)
fi

# Now search the source directory
while IFS= read -r -d '' line; do
  case "$line" in
    *pkg.tar*.sig) signatures+=( "$line" ) ;;
    *pkg.tar*)     toinstall+=( "$line" )  ;;
    *src.tar*)     tocopysrc+=( "$line" )  ;;
  esac
done < <(find "$mergedir${srcdir[1]}" 2>/dev/null -newerct @$time -type f -regextype posix-extended -regex '(.+-){3}.+\.('$regex')\.tar.*' -print0)

# Print search summary
if [[ -z "${tocopy[0]}" && -z "${toinstall[0]}" && -z "${tocopysrc[0]}" ]]; then
  echo "none found."
  exit 0
else
  echo "$((${#tocopy[@]}+${#toinstall[@]}+${#tocopysrc[@]})) found."
  echo
fi

# Remove stale signatures
if ((copy)) || ((repo)); then
  for (( i=0; i<${#toinstall[@]}; i++ )); do
    if [[ "${signatures[@]}" != *"${toinstall[$i]}"* ]]; then
      ((! copy)) || oldsigs+=( "${toinstall[$i]/*\//$cachedir/}.sig" )
      ((! repo)) || oldsigs+=( "${toinstall[$i]/*\//$repodir/}.sig" )
    fi
  done
  [[ -z ${oldsigs[0]} ]] || rm -fv "${oldsigs[@]}"
fi

# Perform the relevant actions on the files
if ((copysrc)); then
  [[ -z ${tocopysrc[0]} ]] || cp -uv --backup=numbered --target-directory="$spkgdir" "${tocopysrc[@]}"
fi

if ((copy)); then
  [[ -z ${tocopy[0]} ]] || cp -uv --target-directory="$cachedir" "${tocopy[@]}" "${copysigs[@]}"
  [[ -z ${toinstall[0]} ]] || cp -uv --target-directory="$cachedir" "${toinstall[@]}" "${signatures[@]}"
fi

if [[ -n ${toinstall[0]} ]]; then
  if ((repo)); then
    if ((! copy)) || [[ ! "$repodir" -ef "$cachedir" ]]; then
      cp -uv --target-directory="$repodir" "${toinstall[@]}" "${signatures[@]}"
    fi
    /usr/bin/repo-add "$repodb" "${toinstall[@]/*\//$repodir/}"
  fi

  if ((install)); then
    /usr/bin/pacman -U "${toinstall[@]}"
  fi
fi
exit 0

### trap gets called here to clean up ##########################################
